/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 */
package br.com.aj2.web.domain;

import static br.com.aj2.dao.support.PropertySelector.newPropertySelector;
import static br.com.aj2.dao.support.Ranges.RangeDate.newRangeDate;
import javax.inject.Named;
import br.com.aj2.dao.support.PropertySelector;
import br.com.aj2.dao.support.Ranges.RangeDate;
import br.com.aj2.dao.support.SearchParameters;
import br.com.aj2.domain.Agenda;
import br.com.aj2.domain.Agenda_;
import br.com.aj2.repository.AgendaRepository;
import br.com.aj2.web.domain.support.GenericSearchForm;
import br.com.aj2.web.faces.ConversationContextScoped;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.inject.Inject;

/**
 * View Helper to search {@link Agenda}.
 * It exposes a {@link Agenda} instance so it can be used in search by Example query.
 */
@Named
@ConversationContextScoped
public class AgendaSearchForm extends GenericSearchForm<Agenda, Integer, AgendaSearchForm> {
    private static final long serialVersionUID = 1L;

    protected Agenda agenda = new Agenda();
    protected RangeDate<Agenda> dataRange = newRangeDate(Agenda_.data);
    protected PropertySelector<Agenda, String> eventoSelector = newPropertySelector(Agenda_.evento);
    protected PropertySelector<Agenda, String> horaSelector = newPropertySelector(Agenda_.hora);
    protected PropertySelector<Agenda, String> arquivoFileNameSelector = newPropertySelector(Agenda_.arquivoFileName);
    protected PropertySelector<Agenda, String> descricaoSelector = newPropertySelector(Agenda_.descricao);
    protected PropertySelector<Agenda, String> arquivoContentTypeSelector = newPropertySelector(Agenda_.arquivoContentType);
    
    
    
    public Agenda getAgenda() {
        return agenda;
    }

    @Override
    protected Agenda getEntity() {
        return getAgenda();
    }

    
    @Override
    public AgendaSearchForm newInstance() {
        return new AgendaSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        return new SearchParameters() //
                .anywhere() //
                .range(dataRange) //
                .property(eventoSelector) //
                .property(horaSelector) //
                .property(arquivoFileNameSelector) //
                .property(descricaoSelector) //
                .property(arquivoContentTypeSelector) //
        ;
    }

    public Boolean vericaData(Date data){
        Calendar dtAtual = Calendar.getInstance();  
        dtAtual.setTime(new Date());  
        dtAtual.set(Calendar.DAY_OF_MONTH, dtAtual.get(Calendar.DAY_OF_MONTH) - 1);  
        dtAtual.set(Calendar.HOUR_OF_DAY, 0);  
        dtAtual.set(Calendar.MINUTE, 0);  
        dtAtual.set(Calendar.SECOND, 0);            
        Date dataAtual = dtAtual.getTime();  
        
        SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd");
        String newData = sd.format(data);
        String newDataAtual = sd.format(new Date());
        
        System.out.println("Comparando datas"+newData+"="+newDataAtual);
        
        if(data == null) {
            return false;
        }  
        
        if(newDataAtual.equals(newData)) {
            return true;
        }else{
            return false;
        }
               
     
    }
    @Override
    public void resetWithOther(AgendaSearchForm other) {
        this.agenda = other.getAgenda();
        this.dataRange = other.getDataRange();
        this.eventoSelector = other.getEventoSelector();
        this.horaSelector = other.getHoraSelector();
        this.arquivoFileNameSelector = other.getArquivoFileNameSelector();
        this.descricaoSelector = other.getDescricaoSelector();
        this.arquivoContentTypeSelector = other.getArquivoContentTypeSelector();
    }

    // Ranges
    public RangeDate<Agenda> getDataRange() {
        return dataRange;
    }

    // Property selectors
    public PropertySelector<Agenda, String> getEventoSelector() {
        return eventoSelector;
    }

    public PropertySelector<Agenda, String> getHoraSelector() {
        return horaSelector;
    }

    public PropertySelector<Agenda, String> getArquivoFileNameSelector() {
        return arquivoFileNameSelector;
    }

    public PropertySelector<Agenda, String> getDescricaoSelector() {
        return descricaoSelector;
    }

    public PropertySelector<Agenda, String> getArquivoContentTypeSelector() {
        return arquivoContentTypeSelector;
    }
}
