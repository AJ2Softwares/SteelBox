/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 */
package br.com.aj2.web.domain;

import static br.com.aj2.dao.support.EntitySelector.newEntitySelector;
import static br.com.aj2.dao.support.PropertySelector.newPropertySelector;
import static br.com.aj2.dao.support.Ranges.RangeDate.newRangeDate;
import static br.com.aj2.dao.support.Ranges.RangeDouble.newRangeDouble;
import javax.inject.Named;
import br.com.aj2.dao.support.EntitySelector;
import br.com.aj2.dao.support.PropertySelector;
import br.com.aj2.dao.support.Ranges.RangeDate;
import br.com.aj2.dao.support.Ranges.RangeDouble;
import br.com.aj2.dao.support.SearchParameters;
import br.com.aj2.domain.Cliente;
import br.com.aj2.domain.Empresa;
import br.com.aj2.domain.ItensOs;
import br.com.aj2.domain.Os;
import br.com.aj2.domain.Os_;
import br.com.aj2.domain.Produtor;
import br.com.aj2.enumTypes.FormaPagamento;
import br.com.aj2.enumTypes.StatusOs;
import br.com.aj2.repository.EmpresaRepository;
import br.com.aj2.web.domain.support.GenericSearchForm;
import br.com.aj2.web.faces.ConversationContextScoped;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

/**
 * View Helper to search {@link Os}.
 * It exposes a {@link Os} instance so it can be used in search by Example query.
 */
@Named
@ConversationContextScoped
public class OsSearchForm extends GenericSearchForm<Os, Integer, OsSearchForm> {
    @Inject
    EmpresaRepository empresaRepository;
    private static final long serialVersionUID = 1L;

    protected Os os = new Os();
    protected RangeDate<Os> dataAtendimentoRange = newRangeDate(Os_.dataAtendimento);
    protected RangeDate<Os> dataConclusaoRange = newRangeDate(Os_.dataConclusao);
    protected RangeDate<Os> dataVenciementoRange = newRangeDate(Os_.dataVenciemento);
    protected RangeDouble<Os> totalRange = newRangeDouble(Os_.total);
    protected PropertySelector<Os, StatusOs> statusSelector = newPropertySelector(Os_.status);
    protected PropertySelector<Os, FormaPagamento> formaPagamentoSelector = newPropertySelector(Os_.formaPagamento);
    protected PropertySelector<Os, String> descriptionSelector = newPropertySelector(Os_.description);
    protected PropertySelector<Os, Double> totalSelector = newPropertySelector(Os_.total);
    protected EntitySelector<Os, Cliente, Integer> clienteSelector = newEntitySelector(Os_.cliente);
    protected EntitySelector<Os, Produtor, Integer> produtorSelector = newEntitySelector(Os_.produtor);

    public Empresa getEmpresa(){
        return empresaRepository.getByAtivo(Boolean.TRUE);
    }
    public Os getOs() {
        return os;
    }

    @Override
    protected Os getEntity() {
        return getOs();
    }

    @Override
    public OsSearchForm newInstance() {
        return new OsSearchForm();
    }

    public Double somar(List<ItensOs> itensOss){
        Double total = 0D;
       for (ItensOs ios: itensOss){
            total = total+ios.getTotal();
        }
        return total;
        
    }
    
    public void export(String formato, List<Os> os) throws JRException, IOException{
         
        
        System.out.println(getEmpresa().getRazaosocial());
        String endereco = getEmpresa().getLogradouro()+","+getEmpresa().getNumero()+" "+getEmpresa().getBairro()+"    "+getEmpresa().getCidade()+"/"+getEmpresa().getUf()+"    Tel.:"+getEmpresa().getTelefone();
        Map parameters = new HashMap();
        parameters.put("razaoSocial", getEmpresa().getRazaosocial());
        parameters.put("logo", getEmpresa().getLogomarcaBinary());
        parameters.put("endereco", endereco) ;
//        parameters.put("pCliente", clienteSelector.getSelected()) ;
//        parameters.put("pProdutor", getOs().getProdutor().getNome()) ;        
//        parameters.put("pDataAtendimentoFrom", dataAtendimentoRange.getFrom()) ;
//        parameters.put("pDataAtendimentoTo", dataAtendimentoRange.getTo()) ;
//        parameters.put("pDataConclusaoFrom", dataConclusaoRange.getFrom()) ;
//        parameters.put("pDataConclusaoTo", dataConclusaoRange.getTo()) ;
//        parameters.put("pDataVencimentoFrom", dataVenciementoRange.getFrom()) ;
//        parameters.put("pDataVencimentoTo", dataVenciementoRange.getTo()) ;
        System.out.println("Verificando se o o vetor esta vazio"+os.isEmpty());
        JRBeanCollectionDataSource beanCollectionDataSource = new JRBeanCollectionDataSource(os);  
        String reportPath = FacesContext.getCurrentInstance().getExternalContext().getRealPath("/reports/ListOsReport.jasper");  
        JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, parameters, beanCollectionDataSource);  
        HttpServletResponse httpServletResponse = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();  
        httpServletResponse.addHeader("Content-disposition", "attachment; filename=report.pdf");  
        ServletOutputStream servletOutputStream = httpServletResponse.getOutputStream();  
        JasperExportManager.exportReportToPdfStream(jasperPrint, servletOutputStream);  
        FacesContext.getCurrentInstance().responseComplete();  
    }  
    
    @Override
    public SearchParameters toSearchParameters() {
        return new SearchParameters() //
                .anywhere() //
                .range(dataAtendimentoRange) //
                .range(dataConclusaoRange) //
                .range(dataVenciementoRange) //
                .range(totalRange) //
                .property(statusSelector) //
                .property(formaPagamentoSelector) //
                .property(descriptionSelector) //
                .property(totalSelector) //
                .entity(clienteSelector) //
                .entity(produtorSelector) //
        ;
    }

    @Override
    public void resetWithOther(OsSearchForm other) {
        this.os = other.getOs();
        this.dataAtendimentoRange = other.getDataAtendimentoRange();
        this.dataConclusaoRange = other.getDataConclusaoRange();
        this.dataVenciementoRange = other.getDataVenciementoRange();
        this.totalRange = other.getTotalRange();
        this.statusSelector = other.getStatusSelector();
        this.formaPagamentoSelector = other.getFormaPagamentoSelector();
        this.descriptionSelector = other.getDescriptionSelector();
        this.totalSelector = other.getTotalSelector();
        this.clienteSelector = other.getClienteSelector();
        this.produtorSelector = other.getProdutorSelector();
    }

    // Ranges
    public RangeDate<Os> getDataAtendimentoRange() {
        return dataAtendimentoRange;
    }

    public RangeDate<Os> getDataConclusaoRange() {
        return dataConclusaoRange;
    }

    public RangeDate<Os> getDataVenciementoRange() {
        return dataVenciementoRange;
    }

    public RangeDouble<Os> getTotalRange() {
        return totalRange;
    }

    // Property selectors
    public PropertySelector<Os, StatusOs> getStatusSelector() {
        return statusSelector;
    }

    public PropertySelector<Os, FormaPagamento> getFormaPagamentoSelector() {
        return formaPagamentoSelector;
    }

    public PropertySelector<Os, String> getDescriptionSelector() {
        return descriptionSelector;
    }

    public PropertySelector<Os, Double> getTotalSelector() {
        return totalSelector;
    }

    // Relation selectors
    public EntitySelector<Os, Cliente, Integer> getClienteSelector() {
        return clienteSelector;
    }

    public EntitySelector<Os, Produtor, Integer> getProdutorSelector() {
        return produtorSelector;
    }
    public String getBosta(){
        return "bosta";
    }
}
