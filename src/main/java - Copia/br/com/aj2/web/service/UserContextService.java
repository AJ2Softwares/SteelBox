/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/services/UserContextService.p.vm.java
 */
package br.com.aj2.web.service;

import java.util.List;
import javax.inject.Named;
import javax.inject.Singleton;
import br.com.aj2.context.UserContext;
import br.com.aj2.dao.support.PropertySelector;
import br.com.aj2.dao.support.Ranges;
import br.com.aj2.domain.Account;
import br.com.aj2.domain.Agenda;
import br.com.aj2.domain.Agenda_;
import br.com.aj2.repository.AccountRepository;
import br.com.aj2.repository.AgendaRepository;
import java.util.Date;
import javax.inject.Inject;
import org.springframework.transaction.annotation.Transactional;
import static br.com.aj2.dao.support.PropertySelector.newPropertySelector;
import static br.com.aj2.dao.support.Ranges.RangeDate.newRangeDate;
import br.com.aj2.dao.support.SearchParameters;
import br.com.aj2.domain.Lancamentos;
import br.com.aj2.domain.Lancamentos_;
import br.com.aj2.enumTypes.StatusOs;
import br.com.aj2.repository.LancamentosRepository;
import java.util.Calendar;
import org.jfree.ui.L1R1ButtonPanel;

/**
 * Simple pass over to access static 'userContext' from EL.
 * @see org.springframework.security.web.authentication.AnonymousAuthenticationFilter
 */
@Named
@Singleton
public class UserContextService {
    @Inject
    private AccountRepository accountRepository;
    @Inject
    private AgendaRepository repository;
    @Inject
    private LancamentosRepository lRepository;
    public String getUsername() {
        return UserContext.getUsername();
    }

    public boolean isAnonymousUser() {
        return UserContext.ANONYMOUS_USER.equalsIgnoreCase(getUsername());
    }

    public boolean isLoggedIn() {
        return !isAnonymousUser();
    }

    public List<String> getRoles() {
        return UserContext.getRoles();
    }

    @SuppressWarnings("empty-statement")
    public int getCompromissoToday(){
        Calendar c = Calendar.getInstance();
        Date dataAtual = new Date();
        c.setTime(dataAtual);                                
        Agenda agenda = new Agenda();
        Ranges.RangeDate<Agenda> dataRange = newRangeDate(Agenda_.data);
        
        dataRange.setTo(dataAtual);
        c.add(Calendar.DAY_OF_WEEK, -1);
        dataRange.setFrom(c.getTime());
        
        List<Agenda> find = repository.find(new SearchParameters().range(dataRange));
        if (find.size()>0){
            return find.size();
        }else{
            return 0;
        }
    }
    
    @SuppressWarnings("empty-statement")
    public int getLancamentoToday(){
        Calendar c = Calendar.getInstance();
        Date dataAtual = new Date();
        c.setTime(dataAtual);                                
        Lancamentos lancamentos = new Lancamentos();
        PropertySelector<Lancamentos, Date> dataPagamento = newPropertySelector(Lancamentos_.dataPagamento);
        Ranges.RangeDate<Lancamentos> dataRange = newRangeDate(Lancamentos_.dataVencimento);
        
        dataPagamento.setSelected(null);
        dataRange.setTo(dataAtual);
        
        
        List<Lancamentos> find = lRepository.find(new SearchParameters().range(dataRange).property(dataPagamento));
        Integer count = 0;
        
        for (Lancamentos l:find){
            if(l.getDataPagamento()==null){
                count ++;
            }
        }
        
        return count;
        
    }
    
    public boolean hasRole(String role) {
        return UserContext.getRoles().contains(role);
    }
    @Transactional(readOnly = true)
    public String getAvatar(){
        Account account = accountRepository.getByLogin(UserContext.getUsername());
        return account.getAvatarFileName();        
    }
}
