/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/util/UserContextUtil.p.vm.java
 */
package br.com.aj2.web.util;


import br.com.aj2.domain.Account;
import br.com.aj2.domain.Empresa;
import br.com.aj2.printer.TypeAwarePrinter;
import br.com.aj2.repository.AccountRepository;
import br.com.aj2.repository.EmpresaRepository;
import br.com.aj2.util.EmailUtils;
import br.com.aj2.util.Mensagem;
import br.com.aj2.util.validaChave;
import java.io.IOException;
import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.validator.ValidatorException;
import javax.inject.Inject;
import javax.inject.Named;
import org.apache.commons.mail.EmailException;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.primefaces.event.FlowEvent;
import org.springframework.context.annotation.Scope;
import org.springframework.security.core.context.SecurityContextHolder;

/**
 * Simple pass over to access static 'userContext'from EL.
 * Keeps also the user's preferred locale.
 *
 * @see org.springframework.security.web.authentication.AnonymousAuthenticationFilter
 */
@Named("licencaBean")
@Scope("session")
public class LicencaBean implements Serializable{
    private boolean liberado = true;
    private String titulo;
    private boolean registrado;
    private boolean serialOk;
    private Date expireDate;
    private static final Logger logger = Logger.getLogger(LicencaBean.class.getName()); 
    private boolean skip;  
    private TabBean tabBean = new TabBean();
    private String serial;    
    @Inject
    private TypeAwarePrinter printer;
    @Inject
    private EmpresaRepository empresaRepository;
    private Empresa empresa;
    @Inject
    private AccountRepository accountRepository;
    private Account account;
    private boolean instalado;
    private boolean showImage;
    private String image;
    private String nomeCli;
    private String plano;
    private validaChave valida;
    private Boolean validaChave;
    
 
    //Metodo de inicialização do MB
    @PostConstruct
    public void init(){
        
         
        if (empresa == null){
            Empresa empresa = new Empresa();
            empresa = empresaRepository.find().get(0);
        }
        if (account == null){
            Account accountSearch = new Account();
            accountSearch.setLogin("admin");

            account = accountRepository.findUnique(accountSearch);
        }
        isExpirated();
        countForExpire();
        setSerialOk(false);
        valida = new validaChave();
        validaChave = null;
    }
    //-------------Fim--------------------------

   

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getNomeCli() {
        return nomeCli;
    }

    public void setNomeCli(String nomeCli) {
        this.nomeCli = nomeCli;
    }

    
    
    //Getters and Setters

    
    
    public boolean isSerialOk() {
        return serialOk;
    }

    public void setSerialOk(boolean serialOk) {
        this.serialOk = serialOk;
    }

   
    
    public String getSerial() {
        
        return serial;
    }

    public void setSerial(String serial) {
        this.serial = serial;
    }

    public boolean isShowImage() {
        return showImage;
    }

    public void setShowImage(boolean showImage) {
        this.showImage = showImage;
    }               
    
    public boolean isInstalado() {
        return instalado;
    }

    public void setInstalado(boolean instalado) {
        this.instalado = instalado;
    }
    
     public TabBean getTabBean() {
        return tabBean;
    }
     
    public Empresa getEmpresa(){            
        return empresa;
    }
    public Account getAccount(){
        
        return account;
    }
    
    public boolean isSkip() {  
        return skip;  
    }  
  
    public void setSkip(boolean skip) {  
        this.skip = skip;  
    }  

    public boolean isRegistrado() {
        return registrado;
    }

    public void setRegistrado(boolean registrado) {
        this.registrado = registrado;
    }

    public String getPlano() {
        return plano;
    }

    public void setPlano(String plano) {
        this.plano = plano;
    }
    
    public String getTitulo() {
        return titulo;
    }

    public void setTitulo(String titulo) {
        this.titulo = titulo;
    }
    
    
    public boolean isLiberado() {
        return liberado;
    }

    public void setLiberado(boolean liberado) {
        this.liberado = liberado;
    }
    
    //-----------Fim------------------------
   
    
    
    //-------------Metodos----------------------
    public void save(ActionEvent actionEvent) {  
        //Persist user  
        Calendar c = Calendar.getInstance();
        Date dataAtual = new Date();
        c.setTime(dataAtual);
        c.add(Calendar.DAY_OF_WEEK, 30);
        empresa.setAtivo(true);
        empresa.setExpiredate(c.getTime());
        accountRepository.merge(account);
        empresaRepository.merge(empresa);
          
        FacesMessage msg = new FacesMessage("Successful", "Dados salvos com sucesso!!!");  
        FacesContext.getCurrentInstance().addMessage(null, msg);  
    }  
  
    
    public void registraApp() throws EmailException{
        //empresaRepository.merge(empresa);
        System.out.println("Acessou o metodo registraApp");
        Mensagem mensagem = new Mensagem();
        mensagem.setDestino("webmaster@aj2.com.br");
        mensagem.setTitulo("Novo cadastro de cliente");
        //mensagem.setMensagem("Isto é um teste");
        mensagem.setMensagem("<p class=\"style3\">A empresa "+empresa.getRazaosocial()+" registrou sua aplicação com o plano "+empresa.getPlano()+": </p>"
            + "<p class=\"style3\">Segue os dados para registro</p>"
            + "<table width=\"492\" border=\"0\">"
            + "  <tr>"
            + "    <td width=\"112\"><span class=\"style1 style3\">Nome:</span></td>"
            + "    <td width=\"370\"><span class=\"style3\">"+getNomeCli()+"</span></td>"
            + "  </tr>"
            + "  <tr>"
            + "    <td><span class=\"style3\"><strong>Razão Social:</strong></span></td>"
            + "    <td><span class=\"style3\">"+empresa.getRazaosocial()+"</span></td>"
            + "  </tr>"
            + "  <tr>"
            + "    <td><span class=\"style3\"><strong>CNPJ/CPF</strong></span></td>"
            + "    <td><span class=\"style3\">"+empresa.getCnpj()+"</span></td>"
            + "  </tr>"
            + "  <tr>"
            + "    <td><span class=\"style3\"><strong>email</strong></span></td>"
            + "    <td><span class=\"style3\">"+empresa.getEmail()+"</span></td>"
            + "  </tr>"
            + "  <tr>"
            + "    <td><span class=\"style3\"><strong>Cidade:</strong></span></td>"
            + "    <td><span class=\"style3\">"+empresa.getCidade()+"-"+empresa.getUf()+"</span></td>"
            + "  </tr>"
            + "  <tr>"
            + "    <td><span class=\"style3\"><strong>Endereço:</strong></span></td>"
            + "    <td><span class=\"style3\">"+empresa.getLogradouro()+"-"+empresa.getCep()+"</span></td>"
            + "  </tr>"
            + "  <tr>"
            + "    <td><span class=\"style3\"><strong>Telefone:</strong></span></td>"
            + "    <td><span class=\"style3\">"+empresa.getTelefone()+"</span></td>"
            + "  </tr>"
            + "</table>"
            + "<p>&nbsp;</p>"
            + "<p>&nbsp;</p>");
        
            try {
                System.out.println("tentando enviar");
                EmailUtils.enviaEmail(mensagem);
            } catch (EmailException ex) {
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Erro! Occoreu um erro ao enviar a mensagem.", "Erro"));
                Logger.getLogger(LicencaBean.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        
    }
    
    public void countForExpire(){
        if (isInstalade()){
            Calendar c = Calendar.getInstance();
            Date dataSistema = empresa.getExpiredate();
            c.setTime(dataSistema);        
            DateTime dateTimeSistema = new DateTime(c.getTime()); 

            DateTime dateTimeAtual = new DateTime(); 
            int diferenca = Days.daysBetween(dateTimeAtual, dateTimeSistema).getDays()+1;

            if (diferenca<10 && diferenca>0){
                  FacesMessage msg = new FacesMessage("Atenção", "Em "+diferenca+" dias sua licença ira expirar, adquire uma nova chave com antecedencia !!!");  
                  msg.setSeverity(FacesMessage.SEVERITY_INFO);
                  FacesContext.getCurrentInstance().addMessage(null, msg);  
                System.out.println("Atenção Em "+diferenca+" dias sua licença ira expirar, adquire uma nova chave !!!");
            }    
        }
        
    }
    
    public void inserirSerial(){
        if (isSerialOk()){            
            Calendar c = Calendar.getInstance();
            Date dataAtual = new Date();
            c.setTime(dataAtual);
            c.add(Calendar.DAY_OF_WEEK, valida.getDiasValidos());
            System.out.println("Dias de validade "+valida.getDiasValidos());
            empresa.setAtivo(true);
            empresa.setExpiredate(c.getTime());
            accountRepository.merge(account);
            empresaRepository.merge(empresa);

            FacesMessage msg = new FacesMessage("Parabêns", "Seu sistema foi liberado para mais "+valida.getDiasValidos()+" !!!");  
            FacesContext.getCurrentInstance().addMessage(null, msg);  
        }
    }
    
    public void VerificaSerial() {
        
        setSerialOk(false);
        if (getSerial()!= null){
            System.out.println("Acessou");
            System.out.println("Tamanho serial"+getSerial().length());
            
            System.out.println("Email: "+empresa.getEmail());
            //setImagem("img/beoro_logo.png");
            if (getSerial().length()== 26){   
                setShowImage(true);
                try {
                validaChave = valida.ValidaChave(getSerial(), empresa.getCnpj(),empresa.getEmail());
                } catch (IOException ex) {
                    Logger.getLogger(LicencaBean.class.getName()).log(Level.SEVERE, "Erro", ex);
                }
                
                if (validaChave){
                    System.out.println("Chave valida");
                    setImage("img/valid.png");
                    setSerialOk(true);
                    
                    
                }else{
                    System.out.println("Chave Invalida");
                    setImage("img/notvalid.png");
                    setSerialOk(false);
                }
                //setImage("img/valid.png");
                
            }else{
                setShowImage(false);
                setSerialOk(false);
                //
            }
        }
        System.out.println("Status da imagem"+isShowImage());
    }
        
    public String onFlowProcess(FlowEvent event) {  
        if ("contrato".equals(event.getOldStep())){
           if(skip) {                                 
                return event.getNewStep();   
            }  
            else {  
                return "contrato"; 
            }   
        }else{
            return event.getNewStep();  
        }
        
    }  
   
    public Boolean isInstalade(){
        if (this.empresa != null){   
            instalado = true;
            return true;
        }else{            
            instalado = false;
            return false;
        }
        
    }
    public Boolean isExpirated(){
        
        String expirado = null;
        if (!isInstalade()){            
            return false;   
            
                    
        }else{
            expireDate = empresa.getExpiredate();
            System.out.println(expirado);
                if (expireDate.before(new Date()) || (!empresa.getAtivo())) {  
                    destroySession();
                    if (this.empresa.getSerialhd()==null){
                        setRegistrado(false);
                        setTitulo("Seu periodo de experiência acabou!!!");
                    }else{
                        
                        setRegistrado(true);
                        setTitulo("Sua chave expirou!!!");
                    }
                    empresa.setAtivo(false);
                    empresaRepository.merge(empresa);
                    return true;
                    
                }else{
                    setTitulo("Sua licença está ok");
                    return false;
                }
        }
    }

    private void destroySession() {
        SecurityContextHolder.clearContext();
        
    }

   

   
    
   
}