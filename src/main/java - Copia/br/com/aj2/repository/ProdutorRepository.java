/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/repository/Repository.e.vm.java
 */
package br.com.aj2.repository;

import static org.apache.commons.lang.StringUtils.isBlank;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;
import br.com.aj2.dao.ProdutorDao;
import br.com.aj2.domain.Produtor;
import br.com.aj2.repository.support.GenericRepository;

/**
 * Note: you may use multiple DAO from this layer.
 */
@Named
@Singleton
public class ProdutorRepository extends GenericRepository<Produtor, Integer> {

    @SuppressWarnings("unused")
    private static final Logger log = LoggerFactory.getLogger(ProdutorRepository.class);

    // required by cglib to create a proxy around the object as we are using the @Transactional annotation
    protected ProdutorRepository() {
        super();
    }

    @Inject
    public ProdutorRepository(ProdutorDao produtorDao) {
        super(produtorDao);
    }

    @Override
    public Produtor getNew() {
        return new Produtor();
    }

    @Override
    public Produtor getNewWithDefaults() {
        Produtor result = getNew();
        result.initDefaultValues();
        return result;
    }

    @Override
    @Transactional(readOnly = true)
    public Produtor get(Produtor model) {
        if (model == null) {
            return null;
        }

        if (model.isIdSet()) {
            return super.get(model);
        }
        if (isBlank(model.getCpfCnpj())) {
            Produtor result = getByCpfCnpj(model.getCpfCnpj());
            if (result != null) {
                return result;
            }
        }

        return null;
    }

    /**
     * Return the persistent instance of {@link Produtor} with the given unique property value cpfCnpj,
     * or null if there is no such persistent instance.
     *
     * @param cpfCnpj the unique value
     * @return the corresponding {@link Produtor} persistent instance or null
     */
    @Transactional(readOnly = true)
    public Produtor getByCpfCnpj(String cpfCnpj) {
        return findUniqueOrNone(new Produtor().cpfCnpj(cpfCnpj));
    }

    /**
     * Delete a {@link Produtor} using the unique column cpfCnpj
     *
     * @param cpfCnpj the unique value
     */
    @Transactional
    public void deleteByCpfCnpj(String cpfCnpj) {
        delete(getByCpfCnpj(cpfCnpj));
    }
}