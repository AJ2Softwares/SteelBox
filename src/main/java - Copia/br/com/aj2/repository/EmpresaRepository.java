/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/repository/Repository.e.vm.java
 */
package br.com.aj2.repository;

import static org.apache.commons.lang.StringUtils.isBlank;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;
import br.com.aj2.dao.EmpresaDao;
import br.com.aj2.domain.Empresa;
import br.com.aj2.repository.support.GenericRepository;

/**
 * Note: you may use multiple DAO from this layer.
 */
@Named
@Singleton
public class EmpresaRepository extends GenericRepository<Empresa, Integer> {

    @SuppressWarnings("unused")
    private static final Logger log = LoggerFactory.getLogger(EmpresaRepository.class);

    // required by cglib to create a proxy around the object as we are using the @Transactional annotation
    protected EmpresaRepository() {
        super();
    }

    @Inject
    public EmpresaRepository(EmpresaDao empresaDao) {
        super(empresaDao);
    }

    @Override
    public Empresa getNew() {
        return new Empresa();
    }

    @Override
    public Empresa getNewWithDefaults() {
        Empresa result = getNew();
        result.initDefaultValues();
        return result;
    }

    @Override
    @Transactional(readOnly = true)
    public Empresa get(Empresa model) {
        if (model == null) {
            return null;
        }

        if (model.isIdSet()) {
            return super.get(model);
        }
        if (isBlank(model.getRazaosocial())) {
            Empresa result = getByRazaosocial(model.getRazaosocial());
            if (result != null) {
                return result;
            }
        }
        if (isBlank(model.getCnpj())) {
            Empresa result = getByCnpj(model.getCnpj());
            if (result != null) {
                return result;
            }
        }
        if (isBlank(model.getEmail())) {
            Empresa result = getByEmail(model.getEmail());
            if (result != null) {
                return result;
            }
        }
        if (model.getAtivo() != null) {
            Empresa result = getByAtivo(model.getAtivo());
            if (result != null) {
                return result;
            }
        }

        return null;
    }

    /**
     * Return the persistent instance of {@link Empresa} with the given unique property value razaosocial,
     * or null if there is no such persistent instance.
     *
     * @param razaosocial the unique value
     * @return the corresponding {@link Empresa} persistent instance or null
     */
    @Transactional(readOnly = true)
    public Empresa getByRazaosocial(String razaosocial) {
        return findUniqueOrNone(new Empresa().razaosocial(razaosocial));
    }

    /**
     * Delete a {@link Empresa} using the unique column razaosocial
     *
     * @param razaosocial the unique value
     */
    @Transactional
    public void deleteByRazaosocial(String razaosocial) {
        delete(getByRazaosocial(razaosocial));
    }

    /**
     * Return the persistent instance of {@link Empresa} with the given unique property value cnpj,
     * or null if there is no such persistent instance.
     *
     * @param cnpj the unique value
     * @return the corresponding {@link Empresa} persistent instance or null
     */
    @Transactional(readOnly = true)
    public Empresa getByCnpj(String cnpj) {
        return findUniqueOrNone(new Empresa().cnpj(cnpj));
    }

    /**
     * Delete a {@link Empresa} using the unique column cnpj
     *
     * @param cnpj the unique value
     */
    @Transactional
    public void deleteByCnpj(String cnpj) {
        delete(getByCnpj(cnpj));
    }

    /**
     * Return the persistent instance of {@link Empresa} with the given unique property value email,
     * or null if there is no such persistent instance.
     *
     * @param email the unique value
     * @return the corresponding {@link Empresa} persistent instance or null
     */
    @Transactional(readOnly = true)
    public Empresa getByEmail(String email) {
        return findUniqueOrNone(new Empresa().email(email));
    }

    /**
     * Delete a {@link Empresa} using the unique column email
     *
     * @param email the unique value
     */
    @Transactional
    public void deleteByEmail(String email) {
        delete(getByEmail(email));
    }

    /**
     * Return the persistent instance of {@link Empresa} with the given unique property value ativo,
     * or null if there is no such persistent instance.
     *
     * @param ativo the unique value
     * @return the corresponding {@link Empresa} persistent instance or null
     */
    @Transactional(readOnly = true)
    public Empresa getByAtivo(Boolean ativo) {
        return findUniqueOrNone(new Empresa().ativo(ativo));
    }

    /**
     * Delete a {@link Empresa} using the unique column ativo
     *
     * @param ativo the unique value
     */
    @Transactional
    public void deleteByAtivo(Boolean ativo) {
        delete(getByAtivo(ativo));
    }
}