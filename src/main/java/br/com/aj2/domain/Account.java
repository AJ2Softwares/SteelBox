/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package br.com.aj2.domain;

import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.EnumType.STRING;
import static javax.persistence.TemporalType.TIMESTAMP;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import br.com.aj2.audit.AuditContextHolder;
import br.com.aj2.domain.Account_;
import br.com.aj2.domain.Role;
import br.com.aj2.enumTypes.EstadoCivil;
import com.google.common.base.Objects;

@Entity
@Table(name = "account")
@FilterDef(name = "myAccountFilter", defaultCondition = "id = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.IntegerType"))
@Filter(name = "myAccountFilter")
public class Account implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(Account.class);

    // Raw attributes
    private Integer id; // pk
    private String login; // unique (not null)
    private String password; // not null
    private String email; // unique (not null)
    private Boolean isEnabled;
    private EstadoCivil civility;
    private String firstName;
    private String lastName;
    private Date birthDate; // not null
    private String description;
    private Date creationDate;
    private String creationAuthor;
    private Date lastModificationDate;
    private String lastModificationAuthor;
    private Integer version;
    private String avatarFileName;
    private String avatarContentType;
    private byte[] avatarBinary;

    // Many to many
    private List<Role> roles = new ArrayList<Role>();

    // -------------------------------
    // Role names support
    // -------------------------------

    /**
     * Returns the granted authorities for this user. You may override
     * this method to provide your own custom authorities.
     */
    @Transient
    @XmlTransient
    public List<String> getRoleNames() {
        List<String> roleNames = new ArrayList<String>();

        for (Role role : getRoles()) {
            roleNames.add(role.getRoleName());
        }

        return roleNames;
    }

    // -- [id] ------------------------

    @Override
    @Column(name = "id", precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public Account id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [login] ------------------------

    @Size(max = 100)
    @NotEmpty
    @Column(name = "login", nullable = false, unique = true, length = 100)
    public String getLogin() {
        return login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    public Account login(String login) {
        setLogin(login);
        return this;
    }

    // -- [password] ------------------------

    @Size(max = 100)
    @NotEmpty
    @Column(name = "`password`", nullable = false, length = 100)
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Account password(String password) {
        setPassword(password);
        return this;
    }

    // -- [email] ------------------------

    @Size(max = 100)
    @NotEmpty
    @Email
    @Column(name = "email", nullable = false, unique = true, length = 100)
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public Account email(String email) {
        setEmail(email);
        return this;
    }

    // -- [isEnabled] ------------------------

    @Column(name = "is_enabled", length = 0)
    public Boolean getIsEnabled() {
        return isEnabled;
    }

    public void setIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
    }

    public Account isEnabled(Boolean isEnabled) {
        setIsEnabled(isEnabled);
        return this;
    }

    // -- [civility] ------------------------

    @Column(name = "civility", length = 10)
    @Enumerated(STRING)
    public EstadoCivil getCivility() {
        return civility;
    }

    public void setCivility(EstadoCivil civility) {
        this.civility = civility;
    }

    public Account civility(EstadoCivil civility) {
        setCivility(civility);
        return this;
    }

    // -- [firstName] ------------------------

    @Size(max = 100)
    @Column(name = "first_name", length = 100)
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public Account firstName(String firstName) {
        setFirstName(firstName);
        return this;
    }

    // -- [lastName] ------------------------

    @Size(max = 100)
    @Column(name = "last_name", length = 100)
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Account lastName(String lastName) {
        setLastName(lastName);
        return this;
    }

    // -- [birthDate] ------------------------

    @NotNull
    @Column(name = "birth_date", nullable = false, length = 19)
    @Temporal(TIMESTAMP)
    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    public Account birthDate(Date birthDate) {
        setBirthDate(birthDate);
        return this;
    }

    // -- [description] ------------------------

    @Size(max = 255)
    @Column(name = "description")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Account description(String description) {
        setDescription(description);
        return this;
    }

    // -- [creationDate] ------------------------

    @Column(name = "creation_date", length = 19)
    @Temporal(TIMESTAMP)
    public Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

    public Account creationDate(Date creationDate) {
        setCreationDate(creationDate);
        return this;
    }

    // -- [creationAuthor] ------------------------

    @Column(name = "creation_author", length = 200)
    public String getCreationAuthor() {
        return creationAuthor;
    }

    public void setCreationAuthor(String creationAuthor) {
        this.creationAuthor = creationAuthor;
    }

    public Account creationAuthor(String creationAuthor) {
        setCreationAuthor(creationAuthor);
        return this;
    }

    // -- [lastModificationDate] ------------------------

    @Column(name = "last_modification_date", length = 19)
    @Temporal(TIMESTAMP)
    public Date getLastModificationDate() {
        return lastModificationDate;
    }

    public void setLastModificationDate(Date lastModificationDate) {
        this.lastModificationDate = lastModificationDate;
    }

    public Account lastModificationDate(Date lastModificationDate) {
        setLastModificationDate(lastModificationDate);
        return this;
    }

    // -- [lastModificationAuthor] ------------------------

    @Column(name = "last_modification_author", length = 200)
    public String getLastModificationAuthor() {
        return lastModificationAuthor;
    }

    public void setLastModificationAuthor(String lastModificationAuthor) {
        this.lastModificationAuthor = lastModificationAuthor;
    }

    public Account lastModificationAuthor(String lastModificationAuthor) {
        setLastModificationAuthor(lastModificationAuthor);
        return this;
    }

    // -- [version] ------------------------

    @Column(name = "version", precision = 10)
    @Version
    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Account version(Integer version) {
        setVersion(version);
        return this;
    }

    // -- [avatarFileName] ------------------------

    @Size(max = 255)
    @Column(name = "avatar_file_name")
    public String getAvatarFileName() {
        return avatarFileName;
    }

    public void setAvatarFileName(String avatarFileName) {
        this.avatarFileName = avatarFileName;
    }

    public Account avatarFileName(String avatarFileName) {
        setAvatarFileName(avatarFileName);
        return this;
    }

    // -- [avatarContentType] ------------------------

    @Size(max = 255)
    @Column(name = "avatar_content_type")
    public String getAvatarContentType() {
        return avatarContentType;
    }

    public void setAvatarContentType(String avatarContentType) {
        this.avatarContentType = avatarContentType;
    }

    public Account avatarContentType(String avatarContentType) {
        setAvatarContentType(avatarContentType);
        return this;
    }

    // -- [avatarBinary] ------------------------

    @Basic(fetch = FetchType.LAZY)
    @Column(name = "avatar_binary")
    @Lob
    public byte[] getAvatarBinary() {
        return avatarBinary;
    }

    public void setAvatarBinary(byte[] avatarBinary) {
        this.avatarBinary = avatarBinary;
    }

    public Account avatarBinary(byte[] avatarBinary) {
        setAvatarBinary(avatarBinary);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to Many
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    // many-to-many: account ==> roles
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    /**
     * Returns the {@link #roles} list.
     */
    @JoinTable(name = "account_has_role", joinColumns = @JoinColumn(name = "ACCOUNT_id"), inverseJoinColumns = @JoinColumn(name = "ROLE_id"))
    @ManyToMany(cascade = { PERSIST, MERGE })
    public List<Role> getRoles() {
        return roles;
    }

    /**
     * Set the {@link #roles} list.
     * <p>
     * It is recommended to use the helper method {@link #addRole(Role)} / {@link #removeRole(Role)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param roles the list of Role
     */
    public void setRoles(List<Role> roles) {
        this.roles = roles;
    }

    /**
     * Helper method to add the passed {@link Role} to the {@link #roles} list.
     */
    public boolean addRole(Role role) {
        return getRoles().add(role);
    }

    /**
     * Helper method to remove the passed {@link Role} from the {@link #roles} list.
     */
    public boolean removeRole(Role role) {
        return getRoles().remove(role);
    }

    /**
     * Helper method to determine if the passed {@link Role} is present in the {@link #roles} list.
     */
    public boolean containsRole(Role role) {
        return getRoles() != null && getRoles().contains(role);
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Account && hashCode() == other.hashCode());
    }

    private volatile int previousHashCode = 0;

    @Override
    public int hashCode() {
        int hashCode = Objects.hashCode(getEmail());
        if (previousHashCode != 0 && previousHashCode != hashCode) {
            log.warn("DEVELOPER: hashCode has changed!." //
                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: " //
                    + getClass().getCanonicalName());
        }

        previousHashCode = hashCode;
        return hashCode;
    }

    /**
     * Construct a readable string representation for this Account instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add(Account_.id.getName(), getId()) //
                .add(Account_.login.getName(), getLogin()) //
                .add(Account_.password.getName(), getPassword()) //
                .add(Account_.email.getName(), getEmail()) //
                .add(Account_.isEnabled.getName(), getIsEnabled()) //
                .add(Account_.civility.getName(), getCivility()) //
                .add(Account_.firstName.getName(), getFirstName()) //
                .add(Account_.lastName.getName(), getLastName()) //
                .add(Account_.birthDate.getName(), getBirthDate()) //
                .add(Account_.description.getName(), getDescription()) //
                .add(Account_.creationDate.getName(), getCreationDate()) //
                .add(Account_.creationAuthor.getName(), getCreationAuthor()) //
                .add(Account_.lastModificationDate.getName(), getLastModificationDate()) //
                .add(Account_.lastModificationAuthor.getName(), getLastModificationAuthor()) //
                .add(Account_.version.getName(), getVersion()) //
                .add(Account_.avatarFileName.getName(), getAvatarFileName()) //
                .add(Account_.avatarContentType.getName(), getAvatarContentType()) //
                .add(Account_.avatarBinary.getName(), getAvatarBinary()) //
                .toString();
    }

    @PrePersist
    protected void prePersist() {
        if (AuditContextHolder.audit()) {
            setCreationAuthor(AuditContextHolder.username());
            setCreationDate(new Date());
        }
    }

    @PreUpdate
    protected void preUpdate() {
        if (AuditContextHolder.audit()) {
            setLastModificationAuthor(AuditContextHolder.username());
            setLastModificationDate(new Date());
        }
    }
}