/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package br.com.aj2.domain;

import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.hibernate.validator.constraints.NotEmpty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import br.com.aj2.domain.Equipamentos;
import br.com.aj2.domain.Estudios_;
import com.google.common.base.Objects;

@Entity
@Table(name = "estudios")
public class Estudios implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(Estudios.class);

    // Raw attributes
    private Integer id; // pk
    private String nome; // unique (not null)
    private Boolean ativo;

    // Many to many
    private List<Equipamentos> equipamentos = new ArrayList<Equipamentos>();

    // -- [id] ------------------------

    @Override
    @Column(name = "id", precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public Estudios id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [nome] ------------------------

    @Size(max = 45)
    @NotEmpty
    @Column(name = "nome", nullable = false, unique = true, length = 45)
    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public Estudios nome(String nome) {
        setNome(nome);
        return this;
    }

    // -- [ativo] ------------------------

    @Column(name = "ativo", length = 0)
    public Boolean getAtivo() {
        return ativo;
    }

    public void setAtivo(Boolean ativo) {
        this.ativo = ativo;
    }

    public Estudios ativo(Boolean ativo) {
        setAtivo(ativo);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to Many
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    // many-to-many: estudios ==> equipamentos
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    /**
     * Returns the {@link #equipamentos} list.
     */
    @JoinTable(name = "equipamentos_has_estudios", joinColumns = @JoinColumn(name = "estudios_id"), inverseJoinColumns = @JoinColumn(name = "equipamentos_id"))
    @ManyToMany(cascade = { PERSIST, MERGE })
    public List<Equipamentos> getEquipamentos() {
        return equipamentos;
    }

    /**
     * Set the {@link #equipamentos} list.
     * <p>
     * It is recommended to use the helper method {@link #addEquipamento(Equipamentos)} / {@link #removeEquipamento(Equipamentos)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param equipamentos the list of Equipamentos
     */
    public void setEquipamentos(List<Equipamentos> equipamentos) {
        this.equipamentos = equipamentos;
    }

    /**
     * Helper method to add the passed {@link Equipamentos} to the {@link #equipamentos} list.
     */
    public boolean addEquipamento(Equipamentos equipamento) {
        return getEquipamentos().add(equipamento);
    }

    /**
     * Helper method to remove the passed {@link Equipamentos} from the {@link #equipamentos} list.
     */
    public boolean removeEquipamento(Equipamentos equipamento) {
        return getEquipamentos().remove(equipamento);
    }

    /**
     * Helper method to determine if the passed {@link Equipamentos} is present in the {@link #equipamentos} list.
     */
    public boolean containsEquipamento(Equipamentos equipamento) {
        return getEquipamentos() != null && getEquipamentos().contains(equipamento);
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Estudios && hashCode() == other.hashCode());
    }

    private volatile int previousHashCode = 0;

    @Override
    public int hashCode() {
        int hashCode = Objects.hashCode(getNome());
        if (previousHashCode != 0 && previousHashCode != hashCode) {
            log.warn("DEVELOPER: hashCode has changed!." //
                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: " //
                    + getClass().getCanonicalName());
        }

        previousHashCode = hashCode;
        return hashCode;
    }

    /**
     * Construct a readable string representation for this Estudios instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add(Estudios_.id.getName(), getId()) //
                .add(Estudios_.nome.getName(), getNome()) //
                .add(Estudios_.ativo.getName(), getAtivo()) //
                .toString();
    }
}