/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 */
package br.com.aj2.web.domain;

import br.com.aj2.dao.support.PropertySelector;
import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.constraints.NotNull;
import br.com.aj2.domain.Cliente;
import br.com.aj2.domain.Cliente_;
import br.com.aj2.domain.Empresa;
import br.com.aj2.domain.ItensOs;
import br.com.aj2.domain.Os;
import br.com.aj2.domain.Produtor;
import br.com.aj2.enumTypes.StatusOs;
import br.com.aj2.repository.EmpresaRepository;
import br.com.aj2.repository.OsRepository;
import br.com.aj2.util.Mensagem;
import br.com.aj2.web.domain.ClienteController;
import br.com.aj2.web.domain.ItensOsController;
import br.com.aj2.web.domain.OsGraphLoader;
import br.com.aj2.web.domain.ProdutorController;
import br.com.aj2.web.domain.support.GenericEditForm;
import br.com.aj2.web.domain.support.GenericToManyAssociation;
import br.com.aj2.web.domain.support.GenericToOneAssociation;
import br.com.aj2.web.faces.ConversationContextScoped;
import br.com.aj2.web.service.UserContextService;
import br.com.aj2.web.util.MensagemBean;
import br.com.aj2.web.util.TabBean;
import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.faces.context.FacesContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import static br.com.aj2.dao.support.PropertySelector.newPropertySelector;
import br.com.aj2.util.EmailUtils;
import java.io.File;
import org.apache.commons.mail.EmailException;

/**
 * View Helper/Controller to edit {@link Os}.
 */
@Named
@ConversationContextScoped
public class OsEditForm extends GenericEditForm<Os, Integer> {
    @Inject
    EmpresaRepository empresaRepository;
    @Inject
    protected ClienteController clienteController;
    protected GenericToOneAssociation<Cliente, Integer> cliente;
    @Inject
    protected ProdutorController produtorController;
    protected GenericToOneAssociation<Produtor, Integer> produtor;
    @Inject
    protected ItensOsController itensOsController;
    protected GenericToManyAssociation<ItensOs, Integer> listItensOs;
    protected TabBean tabBean = new TabBean();
    public Mensagem mensagem = new Mensagem();
    protected PropertySelector<Cliente, String> emailSelector = newPropertySelector(Cliente_.email);
    private String url;
    private String anexoName;

    public Mensagem getMensagem() {
        return mensagem;
    }

    public void setMensagem(Mensagem mensagem) {
        this.mensagem = mensagem;
    }
    
    public PropertySelector<Cliente, String> getEmailSelector() {
        return emailSelector;
    }
    
    @Inject
    public OsEditForm(OsRepository osRepository, OsGraphLoader osGraphLoader) {
        super(osRepository, osGraphLoader);
    }
    public Empresa getEmpresa(){
        return empresaRepository.getByAtivo(Boolean.TRUE);
    }

    public void export(String formato) throws JRException, IOException{
         
        System.out.println(getEmpresa().getRazaosocial());
        List<Os> listOs = new ArrayList<Os>();  
//        System.out.println(getOs().getCliente().getNome());
        listOs.add(getOs());
        String endereco = getEmpresa().getLogradouro()+","+getEmpresa().getNumero()+" "+getEmpresa().getBairro()+"    "+getEmpresa().getCidade()+"/"+getEmpresa().getUf()+"    Tel.:"+getEmpresa().getTelefone();
        Map parameters = new HashMap();
        parameters.put("razaoSocial", getEmpresa().getRazaosocial());
        parameters.put("logo", getEmpresa().getLogomarcaBinary());
        parameters.put("endereco", endereco) ;
        parameters.put("botton", getEmpresa().getBotonrelatorio()) ;
//        System.out.println("Verificando se o o vetor esta vazio"+listOs.isEmpty());
        JRBeanCollectionDataSource beanCollectionDataSource = new JRBeanCollectionDataSource(listOs);  
        String reportPath = FacesContext.getCurrentInstance().getExternalContext().getRealPath("/reports/Os.jasper");  
        JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, parameters, beanCollectionDataSource);  
        HttpServletResponse httpServletResponse = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();  
        httpServletResponse.addHeader("Content-disposition", "attachment; filename=report.pdf");  
        ServletOutputStream servletOutputStream = httpServletResponse.getOutputStream();  
        JasperExportManager.exportReportToPdfStream(jasperPrint, servletOutputStream);  
        FacesContext.getCurrentInstance().responseComplete();  
    }  
    
    public String exportToFile() throws JRException, IOException{
         
        System.out.println(getEmpresa().getRazaosocial());
        List<Os> listOs = new ArrayList<Os>();  
//        System.out.println(getOs().getCliente().getNome());
        listOs.add(getOs());
        String endereco = getEmpresa().getLogradouro()+","+getEmpresa().getNumero()+" "+getEmpresa().getBairro()+"    "+getEmpresa().getCidade()+"/"+getEmpresa().getUf()+"    Tel.:"+getEmpresa().getTelefone();
        Map parameters = new HashMap();
        parameters.put("razaoSocial", getEmpresa().getRazaosocial());
        parameters.put("logo", getEmpresa().getLogomarcaBinary());
        parameters.put("endereco", endereco) ;
        parameters.put("botton", getEmpresa().getBotonrelatorio()) ;
//        System.out.println("Verificando se o o vetor esta vazio"+listOs.isEmpty());
        JRBeanCollectionDataSource beanCollectionDataSource = new JRBeanCollectionDataSource(listOs);  
        String reportPath = FacesContext.getCurrentInstance().getExternalContext().getRealPath("/reports/Os.jasper");  
        String reportPathSave = FacesContext.getCurrentInstance().getExternalContext().getRealPath("/relatorios/");  
        JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, parameters, beanCollectionDataSource);  
        SimpleDateFormat sd = new SimpleDateFormat("dd_MM_yyyy__HH_mm");
        String newData = sd.format(new Date());
        url = reportPathSave+File.separator+"OS_Orcamento_"+getOs().getCliente().getNome()+"_"+getOs().getId()+".pdf";
        anexoName = "OS_Orcamento_"+getOs().getCliente().getNome()+"_"+getOs().getId()+".pdf";
        JasperExportManager.exportReportToPdfFile(jasperPrint,url);
        
        return url;
        
    }  
    
    public void setAnexo() throws JRException, IOException{
        mensagem.setAnexo(exportToFile());
        mensagem.setAnexoName(anexoName);
        List<String> emailCli = new ArrayList<String>();
        emailCli.add(getOs().getCliente().getEmail());
        emailSelector.setSelected(emailCli);
        mensagem.setTitulo("OS/Orçamento");
        mensagem.setMensagem("Seque em anexo o OS/Orçamento proposto");
    }
    public void enviarEmail() throws EmailException, JRException, IOException{
        
        EmailUtils.setPORT(getEmpresa().getPort());
        EmailUtils.setHOSTNAME(getEmpresa().getHostname());
        EmailUtils.setEMAILORIGEM(getEmpresa().getEmailOrigem());
        EmailUtils.setUSERNAME(getEmpresa().getUsername());
        EmailUtils.setPASSWORD(getEmpresa().getPassword());
        EmailUtils.setTLS(getEmpresa().getTls());
        EmailUtils.setSSL(getEmpresa().getSsl());
        //EmailUtils.anexarArquivoMensagem(mensagem.getAnexo());        
        mensagem.setDestino(emailSelector.getSelected());
        EmailUtils.enviaEmail(mensagem);
              
    }
    
    public Double getTotais(){
        List<ItensOs> itens = getOs().getListItensOs();
        Double total = 0.0;
        for (ItensOs item : itens ){
            total = total + item.getTotal();
        }
        return total;
    }

    
    /**
     * View helper to store the x-to-many associations tab's index. 
     */
    public TabBean getTabBean() {
        return tabBean;
    }

    /**
     * The entity to edit/view.
     */
    public Os getOs() {
        return getEntity();
    }

    @PostConstruct
    void setupClientesActions() {
        cliente = new GenericToOneAssociation<Cliente, Integer>("os_cliente", clienteController) {
            @Override
            protected Cliente get() {
                return getOs().getCliente();
            }

            @Override
            protected void set(Cliente cliente) {
                getOs().setCliente(cliente);
            }

            @NotNull
            @Override
            public Cliente getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Cliente, Integer> getCliente() {
        return cliente;
    }

    @PostConstruct
    void setupProdutorsActions() {
        produtor = new GenericToOneAssociation<Produtor, Integer>("os_produtor", produtorController) {
            @Override
            protected Produtor get() {
                return getOs().getProdutor();
            }

            @Override
            protected void set(Produtor produtor) {
                getOs().setProdutor(produtor);
            }

            @NotNull
            @Override
            public Produtor getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<Produtor, Integer> getProdutor() {
        return produtor;
    }
    @PostConstruct
    public void initialize(){
        if (getOs().getCliente() == null){
            Calendar c = Calendar.getInstance();
            Date dataAtual = new Date();
            c.setTime(dataAtual);
            getOs().setStatus(StatusOs.ABERTO);
            getOs().setDataAtendimento(dataAtual);
            c.add(Calendar.DAY_OF_WEEK, 10);
            getOs().setDataConclusao(c.getTime());
            c.add(Calendar.DAY_OF_WEEK, 30);
            getOs().setDataVenciemento(c.getTime()) ;
        }
    }

    @PostConstruct
    void setupListItensOsActions() {
        listItensOs = new GenericToManyAssociation<ItensOs, Integer>(getOs().getListItensOs(), "os_listItensOs", itensOsController) {
            @Override
            protected void remove(ItensOs itensOs) {
                getOs().removeItensOs(itensOs);
            }

            @Override
            protected void add(ItensOs itensOs) {
                getOs().addItensOs(itensOs);
            }

            @Override
            protected void onCreate(ItensOs itensOs) {
                itensOs.setOs(getOs()); // for display
            }
        };
    }

    public GenericToManyAssociation<ItensOs, Integer> getListItensOs() {
        return listItensOs;
    }
}
