/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 */
package br.com.aj2.web.domain;

import static br.com.aj2.dao.support.PropertySelector.newPropertySelector;
import static br.com.aj2.dao.support.Ranges.RangeDate.newRangeDate;
import javax.inject.Named;
import br.com.aj2.dao.support.PropertySelector;
import br.com.aj2.dao.support.Ranges.RangeDate;
import br.com.aj2.dao.support.SearchParameters;
import br.com.aj2.domain.Account;
import br.com.aj2.domain.Account_;
import br.com.aj2.enumTypes.EstadoCivil;
import br.com.aj2.web.domain.support.GenericSearchForm;
import br.com.aj2.web.faces.ConversationContextScoped;

/**
 * View Helper to search {@link Account}.
 * It exposes a {@link Account} instance so it can be used in search by Example query.
 */
@Named
@ConversationContextScoped
public class AccountSearchForm extends GenericSearchForm<Account, Integer, AccountSearchForm> {
    private static final long serialVersionUID = 1L;

    protected Account account = new Account();
    protected RangeDate<Account> birthDateRange = newRangeDate(Account_.birthDate);
    protected PropertySelector<Account, String> loginSelector = newPropertySelector(Account_.login);
    protected PropertySelector<Account, String> passwordSelector = newPropertySelector(Account_.password);
    protected PropertySelector<Account, String> emailSelector = newPropertySelector(Account_.email);
    protected PropertySelector<Account, Boolean> isEnabledSelector = newPropertySelector(Account_.isEnabled);
    protected PropertySelector<Account, EstadoCivil> civilitySelector = newPropertySelector(Account_.civility);
    protected PropertySelector<Account, String> firstNameSelector = newPropertySelector(Account_.firstName);
    protected PropertySelector<Account, String> lastNameSelector = newPropertySelector(Account_.lastName);
    protected PropertySelector<Account, String> descriptionSelector = newPropertySelector(Account_.description);
    protected PropertySelector<Account, String> avatarFileNameSelector = newPropertySelector(Account_.avatarFileName);
    protected PropertySelector<Account, String> avatarContentTypeSelector = newPropertySelector(Account_.avatarContentType);

    public Account getAccount() {
        return account;
    }

    @Override
    protected Account getEntity() {
        return getAccount();
    }

    @Override
    public AccountSearchForm newInstance() {
        return new AccountSearchForm();
    }

    @Override
    public SearchParameters toSearchParameters() {
        return new SearchParameters() //
                .anywhere() //
                .range(birthDateRange) //
                .property(loginSelector) //
                .property(passwordSelector) //
                .property(emailSelector) //
                .property(isEnabledSelector) //
                .property(civilitySelector) //
                .property(firstNameSelector) //
                .property(lastNameSelector) //
                .property(descriptionSelector) //
                .property(avatarFileNameSelector) //
                .property(avatarContentTypeSelector) //
        ;
    }

    @Override
    public void resetWithOther(AccountSearchForm other) {
        this.account = other.getAccount();
        this.birthDateRange = other.getBirthDateRange();
        this.loginSelector = other.getLoginSelector();
        this.passwordSelector = other.getPasswordSelector();
        this.emailSelector = other.getEmailSelector();
        this.isEnabledSelector = other.getIsEnabledSelector();
        this.civilitySelector = other.getCivilitySelector();
        this.firstNameSelector = other.getFirstNameSelector();
        this.lastNameSelector = other.getLastNameSelector();
        this.descriptionSelector = other.getDescriptionSelector();
        this.avatarFileNameSelector = other.getAvatarFileNameSelector();
        this.avatarContentTypeSelector = other.getAvatarContentTypeSelector();
    }

    // Ranges
    public RangeDate<Account> getBirthDateRange() {
        return birthDateRange;
    }

    // Property selectors
    public PropertySelector<Account, String> getLoginSelector() {
        return loginSelector;
    }

    public PropertySelector<Account, String> getPasswordSelector() {
        return passwordSelector;
    }

    public PropertySelector<Account, String> getEmailSelector() {
        return emailSelector;
    }

    public PropertySelector<Account, Boolean> getIsEnabledSelector() {
        return isEnabledSelector;
    }

    public PropertySelector<Account, EstadoCivil> getCivilitySelector() {
        return civilitySelector;
    }

    public PropertySelector<Account, String> getFirstNameSelector() {
        return firstNameSelector;
    }

    public PropertySelector<Account, String> getLastNameSelector() {
        return lastNameSelector;
    }

    public PropertySelector<Account, String> getDescriptionSelector() {
        return descriptionSelector;
    }

    public PropertySelector<Account, String> getAvatarFileNameSelector() {
        return avatarFileNameSelector;
    }

    public PropertySelector<Account, String> getAvatarContentTypeSelector() {
        return avatarContentTypeSelector;
    }
}
